---

- name: Install build dependencies
  yum:
    name: "{{ item }}"
    state: present
  when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)
  with_items:
    - kernel-debug-devel
    - kernel-devel
    - dkms
    - git

- name: Clone nexus source
  get_url: 
    url: "{{  }}"

  # shell: "curl -O -k 'https://nexuxlink' /tmp/amzn-drivers-{{ aws_ena_version }}"
  # when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)

- name: untar binaries 
  shell: "tar -xvf /tmp/amzn-drivers-{{ aws_ena_version }} /usr/src/amzn-drivers-{{ aws_ena_version }}"
  when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)

# - name: removing old versions of ena drivers
#   shell: "for i in `dkms status | grep -o -P '(?<=amzn-drivers, ).*(?=: added)'`; do dkms remove amzn-drivers/$i --all; /bin/rm -R /usr/src/amzn-drivers-$i; /bin/rm -R /var/lib/dkms/amzn-drivers/$i; done" 
#   ignore_errors: true
###  register: remove_oldversion

#- name: removing old versions of ena drivers
#  shell: "for i in `dkms status | grep -o -P '(?<=amzn-drivers, ).*(?=: added)'`;do echo \"dkms remove amzn-drivers/$i --all; /bin/rm -r /usr/src/amzn-drivers-$i; /bin/rm -r /var/lib/dkms/amzn-drivers/$i\"; done"
#  ignore_errors: true
#  register: remove_oldversion

- debug: var=remove_oldversion

- name: Create DKMS conf file
  template:
    src: dkms.conf.j2
    dest: "/usr/src/amzn-drivers-{{ aws_ena_version }}/dkms.conf"
  when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)

- name: Add module to DKMS
  command: "dkms add -m amzn-drivers -v {{ aws_ena_version}}"
  when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)

- name: Build module
  command: "dkms build -m amzn-drivers -v {{ aws_ena_version}}"
  when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)

- name: Install module
  command: "dkms install -m amzn-drivers -v {{ aws_ena_version}}"
  when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)

- name: Load modules
  shell: dracut -f -v
  when: current_ena_version.stdout is defined and (current_ena_version.stdout < aws_ena_version)

- name: check dkms status
  shell: dkms status

- name: Reboot the server
  reboot:
    reboot_timeout: 600

- name: Verify latest version of ena
  shell: 'modinfo ena | grep -i "^version:" | grep -Po "(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)"'
  register: install_ena_version

- name: run ethtool to get version
  shell: ethtool -i eth0
  register: ethtool_eth0
  when: ansible_distribution_major_version | int == 7

- name: run ethtool to get version
  shell: ethtool -i ens3
  register: ethtool_ens3
  when: ansible_distribution_major_version | int == 8

- name: grep - remove /usr/src
  shell: "ls -d /usr/src/amzn-drivers* | grep -v {{ aws_ena_version }}"
  register: get_old_drivers

- debug:
    msg: "{{ get_old_drivers }}"

- name: remove /usr/src versions 
  shell: "rm -rf {{ item }}"
  with_items: "{{ get_old_drivers.stdout_lines }}"

- name: grep /var/lib/dkms/amzn-drivers/
  shell: "ls -ltr /var/lib/dkms/amzn-drivers/| awk â€˜{print $NF}â€™ | grep -v {{ aws_ena_version }} | grep -v `uname -r` | grep -v original_module"
  register: get_old_var_lib 

- name: remove /var/lib
  shell: " rm -rf {{ item }}"
  with_items: "{{ get_old_var_lib.stdout_lines }}"